// this file should not be edited - if changes are necessary, the generator should be updated, then this file should be re-created
public class {{classname}} {{#parent}}extends {{{parent}}} {{/parent}}{{^parent}}extends PolarisComponent {{/parent}}{
{{#vars}}
    {{#isEnum}}
        {{^isContainer}}
            {{>modelInnerEnum}}
        {{/isContainer}}
    {{/isEnum}}
    {{#items.isEnum}}
        {{#items}}
            {{^isContainer}}
                {{>modelInnerEnum}}
            {{/isContainer}}
        {{/items}}
    {{/items.isEnum}}
    {{#jackson}}
        @JsonProperty("{{baseName}}")
        {{#withXml}}
            {{^isContainer}}
                @JacksonXmlProperty({{#isXmlAttribute}}isAttribute = true, {{/isXmlAttribute}}{{#xmlNamespace}}namespace="{{xmlNamespace}}", {{/xmlNamespace}}localName = "{{#xmlName}}{{xmlName}}{{/xmlName}}{{^xmlName}}{{baseName}}{{/xmlName}}")
            {{/isContainer}}
            {{#isContainer}}
                {{#isXmlWrapped}}
                    // items.xmlName={{items.xmlName}}
                    @JacksonXmlElementWrapper(useWrapping = {{isXmlWrapped}}, {{#xmlNamespace}}namespace="{{xmlNamespace}}", {{/xmlNamespace}}localName = "{{#items.xmlName}}{{items.xmlName}}{{/items.xmlName}}{{^items.xmlName}}{{items.baseName}}{{/items.xmlName}}")
                {{/isXmlWrapped}}
            {{/isContainer}}
        {{/withXml}}
    {{/jackson}}
    {{#withXml}}
        {{#isXmlAttribute}}
            @XmlAttribute(name = "{{#xmlName}}{{xmlName}}{{/xmlName}}{{^xmlName}}{{baseName}}{{/xmlName}}")
        {{/isXmlAttribute}}
        {{^isXmlAttribute}}
            {{^isContainer}}
                @XmlElement({{#xmlNamespace}}namespace="{{xmlNamespace}}", {{/xmlNamespace}}name = "{{#xmlName}}{{xmlName}}{{/xmlName}}{{^xmlName}}{{baseName}}{{/xmlName}}")
            {{/isContainer}}
            {{#isContainer}}
                // Is a container wrapped={{isXmlWrapped}}
                {{#items}}
                    // items.name={{name}} items.baseName={{baseName}} items.xmlName={{xmlName}} items.xmlNamespace={{xmlNamespace}}
                    // items.example={{example}} items.paramType={{datatype}}
                    @XmlElement({{#xmlNamespace}}namespace="{{xmlNamespace}}", {{/xmlNamespace}}name = "{{#xmlName}}{{xmlName}}{{/xmlName}}{{^xmlName}}{{baseName}}{{/xmlName}}")
                {{/items}}
                {{#isXmlWrapped}}
                    @XmlElementWrapper({{#xmlNamespace}}namespace="{{xmlNamespace}}", {{/xmlNamespace}}name = "{{#xmlName}}{{xmlName}}{{/xmlName}}{{^xmlName}}{{baseName}}{{/xmlName}}")
                {{/isXmlWrapped}}
            {{/isContainer}}
        {{/isXmlAttribute}}
    {{/withXml}}
    {{#gson}}
        @SerializedName("{{baseName}}")
    {{/gson}}
    {{#isContainer}}
        private {{{datatypeWithEnum}}} {{name}}{{#required}} = {{{defaultValue}}}{{/required}}{{^required}} = null{{/required}};
    {{/isContainer}}
    {{^isContainer}}
        private {{{datatypeWithEnum}}} {{name}}{{#defaultValue}} = {{{defaultValue}}}{{/defaultValue}};
    {{/isContainer}}

{{/vars}}
{{#vars}}
    {{^isReadOnly}}
        {{#isListContainer}}
            public {{classname}} add{{nameInCamelCase}}Item({{{items.datatypeWithEnum}}} {{name}}Item) {
            {{^required}}
                if (this.{{name}} == null) {
                this.{{name}} = {{{defaultValue}}};
                }
            {{/required}}
            this.{{name}}.add({{name}}Item);
            return this;
            }

        {{/isListContainer}}
        {{#isMapContainer}}
            public {{classname}} put{{nameInCamelCase}}Item(String key, {{{items.datatypeWithEnum}}} {{name}}Item) {
            {{^required}}
                if (this.{{name}} == null) {
                this.{{name}} = {{{defaultValue}}};
                }
            {{/required}}
            this.{{name}}.put(key, {{name}}Item);
            return this;
            }

        {{/isMapContainer}}
    {{/isReadOnly}}
    /**
    {{#description}}
        * {{description}}
    {{/description}}
    {{^description}}
        * Get {{name}}
    {{/description}}
    {{#minimum}}
        * minimum: {{minimum}}
    {{/minimum}}
    {{#maximum}}
        * maximum: {{maximum}}
    {{/maximum}}
    * @return {{name}}
    */
    {{#vendorExtensions.extraAnnotation}}
        {{{vendorExtensions.extraAnnotation}}}
    {{/vendorExtensions.extraAnnotation}}
    public {{{datatypeWithEnum}}} {{getter}}() {
    return {{name}};
    }

    {{^isReadOnly}}
        public void {{setter}}({{{datatypeWithEnum}}} {{name}}) {
        this.{{name}} = {{name}};
        }

    {{/isReadOnly}}
{{/vars}}
}
